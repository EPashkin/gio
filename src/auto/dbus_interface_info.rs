// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use gio_sys;
use glib;
use glib::translate::*;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct DBusInterfaceInfo(Shared<gio_sys::GDBusInterfaceInfo>);

    match fn {
        ref => |ptr| gio_sys::g_dbus_interface_info_ref(ptr),
        unref => |ptr| gio_sys::g_dbus_interface_info_unref(ptr),
        get_type => || gio_sys::g_dbus_interface_info_get_type(),
    }
}

impl DBusInterfaceInfo {
    pub fn cache_build(&self) {
        unsafe {
            gio_sys::g_dbus_interface_info_cache_build(self.to_glib_none().0);
        }
    }

    pub fn cache_release(&self) {
        unsafe {
            gio_sys::g_dbus_interface_info_cache_release(self.to_glib_none().0);
        }
    }

    pub fn generate_xml(&self, indent: u32, string_builder: &mut glib::String) {
        unsafe {
            gio_sys::g_dbus_interface_info_generate_xml(
                self.to_glib_none().0,
                indent,
                string_builder.to_glib_none_mut().0,
            );
        }
    }

    //pub fn lookup_method(&self, name: &str) -> /*Ignored*/Option<DBusMethodInfo> {
    //    unsafe { TODO: call gio_sys:g_dbus_interface_info_lookup_method() }
    //}

    //pub fn lookup_property(&self, name: &str) -> /*Ignored*/Option<DBusPropertyInfo> {
    //    unsafe { TODO: call gio_sys:g_dbus_interface_info_lookup_property() }
    //}

    //pub fn lookup_signal(&self, name: &str) -> /*Ignored*/Option<DBusSignalInfo> {
    //    unsafe { TODO: call gio_sys:g_dbus_interface_info_lookup_signal() }
    //}
}
