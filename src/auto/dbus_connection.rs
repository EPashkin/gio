// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(feature = "futures")]
use futures::future;
use gio_sys;
use glib;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem;
use std::mem::transmute;
use std::ptr;
use ActionGroup;
use Cancellable;
use Credentials;
use DBusAuthObserver;
use DBusCallFlags;
use DBusCapabilityFlags;
use DBusConnectionFlags;
use DBusMessage;
use DBusSendMessageFlags;
use DBusSignalFlags;
use Error;
use IOStream;
use MenuModel;

glib_wrapper! {
    pub struct DBusConnection(Object<gio_sys::GDBusConnection, DBusConnectionClass>);

    match fn {
        get_type => || gio_sys::g_dbus_connection_get_type(),
    }
}

impl DBusConnection {
    pub fn new_for_address_sync<P: IsA<Cancellable>>(
        address: &str,
        flags: DBusConnectionFlags,
        observer: Option<&DBusAuthObserver>,
        cancellable: Option<&P>,
    ) -> Result<DBusConnection, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = gio_sys::g_dbus_connection_new_for_address_sync(
                address.to_glib_none().0,
                flags.to_glib(),
                observer.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn new_sync<P: IsA<IOStream>, Q: IsA<Cancellable>>(
        stream: &P,
        guid: Option<&str>,
        flags: DBusConnectionFlags,
        observer: Option<&DBusAuthObserver>,
        cancellable: Option<&Q>,
    ) -> Result<DBusConnection, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = gio_sys::g_dbus_connection_new_sync(
                stream.as_ref().to_glib_none().0,
                guid.to_glib_none().0,
                flags.to_glib(),
                observer.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn add_filter<
        P: Fn(&DBusConnection, &DBusMessage, bool) -> Option<DBusMessage> + 'static,
    >(
        &self,
        filter_function: P,
    ) -> u32 {
        let filter_function_data: Box_<P> = Box::new(filter_function);
        unsafe extern "C" fn filter_function_func<
            P: Fn(&DBusConnection, &DBusMessage, bool) -> Option<DBusMessage> + 'static,
        >(
            connection: *mut gio_sys::GDBusConnection,
            message: *mut gio_sys::GDBusMessage,
            incoming: glib_sys::gboolean,
            user_data: glib_sys::gpointer,
        ) -> *mut gio_sys::GDBusMessage {
            let connection = from_glib_borrow(connection);
            let message = from_glib_full(message);
            let incoming = from_glib(incoming);
            let callback: &P = &*(user_data as *mut _);
            let res = (*callback)(&connection, &message, incoming);
            res.to_glib_full()
        }
        let filter_function = Some(filter_function_func::<P> as _);
        unsafe extern "C" fn user_data_free_func_func<
            P: Fn(&DBusConnection, &DBusMessage, bool) -> Option<DBusMessage> + 'static,
        >(
            data: glib_sys::gpointer,
        ) {
            let _callback: Box_<P> = Box_::from_raw(data as *mut _);
        }
        let destroy_call3 = Some(user_data_free_func_func::<P> as _);
        let super_callback0: Box_<P> = filter_function_data;
        unsafe {
            gio_sys::g_dbus_connection_add_filter(
                self.to_glib_none().0,
                filter_function,
                Box::into_raw(super_callback0) as *mut _,
                destroy_call3,
            )
        }
    }

    pub fn call<P: IsA<Cancellable>, Q: FnOnce(Result<glib::Variant, Error>) + Send + 'static>(
        &self,
        bus_name: Option<&str>,
        object_path: &str,
        interface_name: &str,
        method_name: &str,
        parameters: Option<&glib::Variant>,
        reply_type: Option<&glib::VariantTy>,
        flags: DBusCallFlags,
        timeout_msec: i32,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box<Q> = Box::new(callback);
        unsafe extern "C" fn call_trampoline<
            Q: FnOnce(Result<glib::Variant, Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret =
                gio_sys::g_dbus_connection_call_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box<Q> = Box::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = call_trampoline::<Q>;
        unsafe {
            gio_sys::g_dbus_connection_call(
                self.to_glib_none().0,
                bus_name.to_glib_none().0,
                object_path.to_glib_none().0,
                interface_name.to_glib_none().0,
                method_name.to_glib_none().0,
                parameters.to_glib_none().0,
                reply_type.to_glib_none().0,
                flags.to_glib(),
                timeout_msec,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(feature = "futures")]
    pub fn call_future(
        &self,
        bus_name: Option<&str>,
        object_path: &str,
        interface_name: &str,
        method_name: &str,
        parameters: Option<&glib::Variant>,
        reply_type: Option<&glib::VariantTy>,
        flags: DBusCallFlags,
        timeout_msec: i32,
    ) -> Box_<dyn future::Future<Output = Result<glib::Variant, Error>> + std::marker::Unpin> {
        use fragile::Fragile;
        use GioFuture;

        let bus_name = bus_name.map(ToOwned::to_owned);
        let object_path = String::from(object_path);
        let interface_name = String::from(interface_name);
        let method_name = String::from(method_name);
        let parameters = parameters.map(ToOwned::to_owned);
        let reply_type = reply_type.map(ToOwned::to_owned);
        GioFuture::new(self, move |obj, send| {
            let cancellable = Cancellable::new();
            let send = Fragile::new(send);
            obj.call(
                bus_name.as_ref().map(::std::borrow::Borrow::borrow),
                &object_path,
                &interface_name,
                &method_name,
                parameters.as_ref().map(::std::borrow::Borrow::borrow),
                reply_type.as_ref().map(::std::borrow::Borrow::borrow),
                flags,
                timeout_msec,
                Some(&cancellable),
                move |res| {
                    let _ = send.into_inner().send(res);
                },
            );

            cancellable
        })
    }

    pub fn call_sync<P: IsA<Cancellable>>(
        &self,
        bus_name: Option<&str>,
        object_path: &str,
        interface_name: &str,
        method_name: &str,
        parameters: Option<&glib::Variant>,
        reply_type: Option<&glib::VariantTy>,
        flags: DBusCallFlags,
        timeout_msec: i32,
        cancellable: Option<&P>,
    ) -> Result<glib::Variant, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = gio_sys::g_dbus_connection_call_sync(
                self.to_glib_none().0,
                bus_name.to_glib_none().0,
                object_path.to_glib_none().0,
                interface_name.to_glib_none().0,
                method_name.to_glib_none().0,
                parameters.to_glib_none().0,
                reply_type.to_glib_none().0,
                flags.to_glib(),
                timeout_msec,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    //pub fn call_with_unix_fd_list<P: IsA<Cancellable>, Q: FnOnce(Result<(glib::Variant, /*Ignored*/UnixFDList), Error>) + Send + 'static>(&self, bus_name: Option<&str>, object_path: &str, interface_name: &str, method_name: &str, parameters: Option<&glib::Variant>, reply_type: Option<&glib::VariantTy>, flags: DBusCallFlags, timeout_msec: i32, fd_list: /*Ignored*/Option<&UnixFDList>, cancellable: Option<&P>, callback: Q) {
    //    unsafe { TODO: call gio_sys:g_dbus_connection_call_with_unix_fd_list() }
    //}

    //#[cfg(feature = "futures")]
    //pub fn call_with_unix_fd_list_future(&self, bus_name: Option<&str>, object_path: &str, interface_name: &str, method_name: &str, parameters: Option<&glib::Variant>, reply_type: Option<&glib::VariantTy>, flags: DBusCallFlags, timeout_msec: i32, fd_list: /*Ignored*/Option<&UnixFDList>) -> Box_<dyn future::Future<Output = Result<(glib::Variant, /*Ignored*/UnixFDList), Error>> + std::marker::Unpin> {
    //use GioFuture;
    //use fragile::Fragile;

    //let bus_name = bus_name.map(ToOwned::to_owned);
    //let object_path = String::from(object_path);
    //let interface_name = String::from(interface_name);
    //let method_name = String::from(method_name);
    //let parameters = parameters.map(ToOwned::to_owned);
    //let reply_type = reply_type.map(ToOwned::to_owned);
    //let fd_list = fd_list.map(ToOwned::to_owned);
    //GioFuture::new(self, move |obj, send| {
    //    let cancellable = Cancellable::new();
    //    let send = Fragile::new(send);
    //    obj.call_with_unix_fd_list(
    //        bus_name.as_ref().map(::std::borrow::Borrow::borrow),
    //        &object_path,
    //        &interface_name,
    //        &method_name,
    //        parameters.as_ref().map(::std::borrow::Borrow::borrow),
    //        reply_type.as_ref().map(::std::borrow::Borrow::borrow),
    //        flags,
    //        timeout_msec,
    //        fd_list.as_ref().map(::std::borrow::Borrow::borrow),
    //        Some(&cancellable),
    //        move |res| {
    //            let _ = send.into_inner().send(res);
    //        },
    //    );

    //    cancellable
    //})
    //}

    //pub fn call_with_unix_fd_list_sync<P: IsA<Cancellable>>(&self, bus_name: Option<&str>, object_path: &str, interface_name: &str, method_name: &str, parameters: Option<&glib::Variant>, reply_type: Option<&glib::VariantTy>, flags: DBusCallFlags, timeout_msec: i32, fd_list: /*Ignored*/Option<&UnixFDList>, out_fd_list: /*Ignored*/UnixFDList, cancellable: Option<&P>) -> Result<glib::Variant, Error> {
    //    unsafe { TODO: call gio_sys:g_dbus_connection_call_with_unix_fd_list_sync() }
    //}

    pub fn close<P: IsA<Cancellable>, Q: FnOnce(Result<(), Error>) + Send + 'static>(
        &self,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box<Q> = Box::new(callback);
        unsafe extern "C" fn close_trampoline<Q: FnOnce(Result<(), Error>) + Send + 'static>(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ =
                gio_sys::g_dbus_connection_close_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box<Q> = Box::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = close_trampoline::<Q>;
        unsafe {
            gio_sys::g_dbus_connection_close(
                self.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(feature = "futures")]
    pub fn close_future(
        &self,
    ) -> Box_<dyn future::Future<Output = Result<(), Error>> + std::marker::Unpin> {
        use fragile::Fragile;
        use GioFuture;

        GioFuture::new(self, move |obj, send| {
            let cancellable = Cancellable::new();
            let send = Fragile::new(send);
            obj.close(Some(&cancellable), move |res| {
                let _ = send.into_inner().send(res);
            });

            cancellable
        })
    }

    pub fn close_sync<P: IsA<Cancellable>>(&self, cancellable: Option<&P>) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = gio_sys::g_dbus_connection_close_sync(
                self.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn emit_signal(
        &self,
        destination_bus_name: Option<&str>,
        object_path: &str,
        interface_name: &str,
        signal_name: &str,
        parameters: Option<&glib::Variant>,
    ) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = gio_sys::g_dbus_connection_emit_signal(
                self.to_glib_none().0,
                destination_bus_name.to_glib_none().0,
                object_path.to_glib_none().0,
                interface_name.to_glib_none().0,
                signal_name.to_glib_none().0,
                parameters.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn export_action_group<P: IsA<ActionGroup>>(
        &self,
        object_path: &str,
        action_group: &P,
    ) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = gio_sys::g_dbus_connection_export_action_group(
                self.to_glib_none().0,
                object_path.to_glib_none().0,
                action_group.as_ref().to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn export_menu_model<P: IsA<MenuModel>>(
        &self,
        object_path: &str,
        menu: &P,
    ) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = gio_sys::g_dbus_connection_export_menu_model(
                self.to_glib_none().0,
                object_path.to_glib_none().0,
                menu.as_ref().to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn flush<P: IsA<Cancellable>, Q: FnOnce(Result<(), Error>) + Send + 'static>(
        &self,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box<Q> = Box::new(callback);
        unsafe extern "C" fn flush_trampoline<Q: FnOnce(Result<(), Error>) + Send + 'static>(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ =
                gio_sys::g_dbus_connection_flush_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box<Q> = Box::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = flush_trampoline::<Q>;
        unsafe {
            gio_sys::g_dbus_connection_flush(
                self.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(feature = "futures")]
    pub fn flush_future(
        &self,
    ) -> Box_<dyn future::Future<Output = Result<(), Error>> + std::marker::Unpin> {
        use fragile::Fragile;
        use GioFuture;

        GioFuture::new(self, move |obj, send| {
            let cancellable = Cancellable::new();
            let send = Fragile::new(send);
            obj.flush(Some(&cancellable), move |res| {
                let _ = send.into_inner().send(res);
            });

            cancellable
        })
    }

    pub fn flush_sync<P: IsA<Cancellable>>(&self, cancellable: Option<&P>) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = gio_sys::g_dbus_connection_flush_sync(
                self.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn get_capabilities(&self) -> DBusCapabilityFlags {
        unsafe {
            from_glib(gio_sys::g_dbus_connection_get_capabilities(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_exit_on_close(&self) -> bool {
        unsafe {
            from_glib(gio_sys::g_dbus_connection_get_exit_on_close(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v2_60", feature = "dox"))]
    pub fn get_flags(&self) -> DBusConnectionFlags {
        unsafe { from_glib(gio_sys::g_dbus_connection_get_flags(self.to_glib_none().0)) }
    }

    pub fn get_guid(&self) -> Option<GString> {
        unsafe { from_glib_none(gio_sys::g_dbus_connection_get_guid(self.to_glib_none().0)) }
    }

    pub fn get_last_serial(&self) -> u32 {
        unsafe { gio_sys::g_dbus_connection_get_last_serial(self.to_glib_none().0) }
    }

    pub fn get_peer_credentials(&self) -> Option<Credentials> {
        unsafe {
            from_glib_none(gio_sys::g_dbus_connection_get_peer_credentials(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn get_stream(&self) -> Option<IOStream> {
        unsafe { from_glib_none(gio_sys::g_dbus_connection_get_stream(self.to_glib_none().0)) }
    }

    pub fn get_unique_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gio_sys::g_dbus_connection_get_unique_name(
                self.to_glib_none().0,
            ))
        }
    }

    pub fn is_closed(&self) -> bool {
        unsafe { from_glib(gio_sys::g_dbus_connection_is_closed(self.to_glib_none().0)) }
    }

    //pub fn register_object(&self, object_path: &str, interface_info: &DBusInterfaceInfo, vtable: /*Ignored*/Option<&DBusInterfaceVTable>, user_data: /*Unimplemented*/Option<Fundamental: Pointer>) -> Result<(), Error> {
    //    unsafe { TODO: call gio_sys:g_dbus_connection_register_object() }
    //}

    //#[cfg(any(feature = "v2_46", feature = "dox"))]
    //pub fn register_object_with_closures(&self, object_path: &str, interface_info: &DBusInterfaceInfo, method_call_closure: /*Ignored*/Option<&glib::Closure>, get_property_closure: /*Ignored*/Option<&glib::Closure>, set_property_closure: /*Ignored*/Option<&glib::Closure>) -> Result<(), Error> {
    //    unsafe { TODO: call gio_sys:g_dbus_connection_register_object_with_closures() }
    //}

    //pub fn register_subtree(&self, object_path: &str, vtable: /*Ignored*/&DBusSubtreeVTable, flags: /*Ignored*/DBusSubtreeFlags, user_data: /*Unimplemented*/Option<Fundamental: Pointer>) -> Result<(), Error> {
    //    unsafe { TODO: call gio_sys:g_dbus_connection_register_subtree() }
    //}

    pub fn remove_filter(&self, filter_id: u32) {
        unsafe {
            gio_sys::g_dbus_connection_remove_filter(self.to_glib_none().0, filter_id);
        }
    }

    pub fn send_message(
        &self,
        message: &DBusMessage,
        flags: DBusSendMessageFlags,
    ) -> Result<u32, Error> {
        unsafe {
            let mut out_serial = mem::uninitialized();
            let mut error = ptr::null_mut();
            let _ = gio_sys::g_dbus_connection_send_message(
                self.to_glib_none().0,
                message.to_glib_none().0,
                flags.to_glib(),
                &mut out_serial,
                &mut error,
            );
            if error.is_null() {
                Ok(out_serial)
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn send_message_with_reply<
        P: IsA<Cancellable>,
        Q: FnOnce(Result<DBusMessage, Error>) + Send + 'static,
    >(
        &self,
        message: &DBusMessage,
        flags: DBusSendMessageFlags,
        timeout_msec: i32,
        cancellable: Option<&P>,
        callback: Q,
    ) -> u32 {
        let user_data: Box<Q> = Box::new(callback);
        unsafe extern "C" fn send_message_with_reply_trampoline<
            Q: FnOnce(Result<DBusMessage, Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = gio_sys::g_dbus_connection_send_message_with_reply_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box<Q> = Box::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = send_message_with_reply_trampoline::<Q>;
        unsafe {
            let mut out_serial = mem::uninitialized();
            gio_sys::g_dbus_connection_send_message_with_reply(
                self.to_glib_none().0,
                message.to_glib_none().0,
                flags.to_glib(),
                timeout_msec,
                &mut out_serial,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box::into_raw(user_data) as *mut _,
            );
            out_serial
        }
    }

    #[cfg(feature = "futures")]
    pub fn send_message_with_reply_future(
        &self,
        message: &DBusMessage,
        flags: DBusSendMessageFlags,
        timeout_msec: i32,
    ) -> Box_<dyn future::Future<Output = Result<DBusMessage, Error>> + std::marker::Unpin> {
        use fragile::Fragile;
        use GioFuture;

        let message = message.clone();
        GioFuture::new(self, move |obj, send| {
            let cancellable = Cancellable::new();
            let send = Fragile::new(send);
            obj.send_message_with_reply(
                &message,
                flags,
                timeout_msec,
                Some(&cancellable),
                move |res| {
                    let _ = send.into_inner().send(res);
                },
            );

            cancellable
        })
    }

    pub fn send_message_with_reply_sync<P: IsA<Cancellable>>(
        &self,
        message: &DBusMessage,
        flags: DBusSendMessageFlags,
        timeout_msec: i32,
        cancellable: Option<&P>,
    ) -> Result<(DBusMessage, u32), Error> {
        unsafe {
            let mut out_serial = mem::uninitialized();
            let mut error = ptr::null_mut();
            let ret = gio_sys::g_dbus_connection_send_message_with_reply_sync(
                self.to_glib_none().0,
                message.to_glib_none().0,
                flags.to_glib(),
                timeout_msec,
                &mut out_serial,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok((from_glib_full(ret), out_serial))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn set_exit_on_close(&self, exit_on_close: bool) {
        unsafe {
            gio_sys::g_dbus_connection_set_exit_on_close(
                self.to_glib_none().0,
                exit_on_close.to_glib(),
            );
        }
    }

    pub fn signal_subscribe<
        P: Fn(&DBusConnection, &str, &str, &str, &str, &glib::Variant) + 'static,
    >(
        &self,
        sender: Option<&str>,
        interface_name: Option<&str>,
        member: Option<&str>,
        object_path: Option<&str>,
        arg0: Option<&str>,
        flags: DBusSignalFlags,
        callback: P,
    ) -> u32 {
        let callback_data: Box_<P> = Box::new(callback);
        unsafe extern "C" fn callback_func<
            P: Fn(&DBusConnection, &str, &str, &str, &str, &glib::Variant) + 'static,
        >(
            connection: *mut gio_sys::GDBusConnection,
            sender_name: *const libc::c_char,
            object_path: *const libc::c_char,
            interface_name: *const libc::c_char,
            signal_name: *const libc::c_char,
            parameters: *mut glib_sys::GVariant,
            user_data: glib_sys::gpointer,
        ) {
            let connection = from_glib_borrow(connection);
            let sender_name: GString = from_glib_borrow(sender_name);
            let object_path: GString = from_glib_borrow(object_path);
            let interface_name: GString = from_glib_borrow(interface_name);
            let signal_name: GString = from_glib_borrow(signal_name);
            let parameters = from_glib_borrow(parameters);
            let callback: &P = &*(user_data as *mut _);
            (*callback)(
                &connection,
                sender_name.as_str(),
                object_path.as_str(),
                interface_name.as_str(),
                signal_name.as_str(),
                &parameters,
            );
        }
        let callback = Some(callback_func::<P> as _);
        unsafe extern "C" fn user_data_free_func_func<
            P: Fn(&DBusConnection, &str, &str, &str, &str, &glib::Variant) + 'static,
        >(
            data: glib_sys::gpointer,
        ) {
            let _callback: Box_<P> = Box_::from_raw(data as *mut _);
        }
        let destroy_call9 = Some(user_data_free_func_func::<P> as _);
        let super_callback0: Box_<P> = callback_data;
        unsafe {
            gio_sys::g_dbus_connection_signal_subscribe(
                self.to_glib_none().0,
                sender.to_glib_none().0,
                interface_name.to_glib_none().0,
                member.to_glib_none().0,
                object_path.to_glib_none().0,
                arg0.to_glib_none().0,
                flags.to_glib(),
                callback,
                Box::into_raw(super_callback0) as *mut _,
                destroy_call9,
            )
        }
    }

    pub fn signal_unsubscribe(&self, subscription_id: u32) {
        unsafe {
            gio_sys::g_dbus_connection_signal_unsubscribe(self.to_glib_none().0, subscription_id);
        }
    }

    pub fn start_message_processing(&self) {
        unsafe {
            gio_sys::g_dbus_connection_start_message_processing(self.to_glib_none().0);
        }
    }

    pub fn unexport_action_group(&self, export_id: u32) {
        unsafe {
            gio_sys::g_dbus_connection_unexport_action_group(self.to_glib_none().0, export_id);
        }
    }

    pub fn unexport_menu_model(&self, export_id: u32) {
        unsafe {
            gio_sys::g_dbus_connection_unexport_menu_model(self.to_glib_none().0, export_id);
        }
    }

    pub fn unregister_object(&self, registration_id: u32) -> bool {
        unsafe {
            from_glib(gio_sys::g_dbus_connection_unregister_object(
                self.to_glib_none().0,
                registration_id,
            ))
        }
    }

    pub fn unregister_subtree(&self, registration_id: u32) -> bool {
        unsafe {
            from_glib(gio_sys::g_dbus_connection_unregister_subtree(
                self.to_glib_none().0,
                registration_id,
            ))
        }
    }

    pub fn get_property_closed(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"closed\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value.get().unwrap()
        }
    }

    pub fn get_property_flags(&self) -> DBusConnectionFlags {
        unsafe {
            let mut value = Value::from_type(<DBusConnectionFlags as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.as_ptr() as *mut gobject_sys::GObject,
                b"flags\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value.get().unwrap()
        }
    }

    pub fn new<
        P: IsA<IOStream>,
        Q: IsA<Cancellable>,
        R: FnOnce(Result<DBusConnection, Error>) + Send + 'static,
    >(
        stream: &P,
        guid: Option<&str>,
        flags: DBusConnectionFlags,
        observer: Option<&DBusAuthObserver>,
        cancellable: Option<&Q>,
        callback: R,
    ) {
        let user_data: Box<R> = Box::new(callback);
        unsafe extern "C" fn new_trampoline<
            R: FnOnce(Result<DBusConnection, Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = gio_sys::g_dbus_connection_new_finish(res, &mut error);
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box<R> = Box::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = new_trampoline::<R>;
        unsafe {
            gio_sys::g_dbus_connection_new(
                stream.as_ref().to_glib_none().0,
                guid.to_glib_none().0,
                flags.to_glib(),
                observer.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(feature = "futures")]
    pub fn new_future<P: IsA<IOStream> + Clone + 'static>(
        stream: &P,
        guid: Option<&str>,
        flags: DBusConnectionFlags,
        observer: Option<&DBusAuthObserver>,
    ) -> Box_<dyn future::Future<Output = Result<DBusConnection, Error>> + std::marker::Unpin> {
        use fragile::Fragile;
        use GioFuture;

        let stream = stream.clone();
        let guid = guid.map(ToOwned::to_owned);
        let observer = observer.map(ToOwned::to_owned);
        GioFuture::new(&(), move |_obj, send| {
            let cancellable = Cancellable::new();
            let send = Fragile::new(send);
            Self::new(
                &stream,
                guid.as_ref().map(::std::borrow::Borrow::borrow),
                flags,
                observer.as_ref().map(::std::borrow::Borrow::borrow),
                Some(&cancellable),
                move |res| {
                    let _ = send.into_inner().send(res);
                },
            );

            cancellable
        })
    }

    pub fn new_for_address<
        P: IsA<Cancellable>,
        Q: FnOnce(Result<DBusConnection, Error>) + Send + 'static,
    >(
        address: &str,
        flags: DBusConnectionFlags,
        observer: Option<&DBusAuthObserver>,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box<Q> = Box::new(callback);
        unsafe extern "C" fn new_for_address_trampoline<
            Q: FnOnce(Result<DBusConnection, Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = gio_sys::g_dbus_connection_new_for_address_finish(res, &mut error);
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box<Q> = Box::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = new_for_address_trampoline::<Q>;
        unsafe {
            gio_sys::g_dbus_connection_new_for_address(
                address.to_glib_none().0,
                flags.to_glib(),
                observer.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(feature = "futures")]
    pub fn new_for_address_future(
        address: &str,
        flags: DBusConnectionFlags,
        observer: Option<&DBusAuthObserver>,
    ) -> Box_<dyn future::Future<Output = Result<DBusConnection, Error>> + std::marker::Unpin> {
        use fragile::Fragile;
        use GioFuture;

        let address = String::from(address);
        let observer = observer.map(ToOwned::to_owned);
        GioFuture::new(&(), move |_obj, send| {
            let cancellable = Cancellable::new();
            let send = Fragile::new(send);
            Self::new_for_address(
                &address,
                flags,
                observer.as_ref().map(::std::borrow::Borrow::borrow),
                Some(&cancellable),
                move |res| {
                    let _ = send.into_inner().send(res);
                },
            );

            cancellable
        })
    }

    pub fn connect_closed<F: Fn(&DBusConnection, bool, Option<&Error>) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn closed_trampoline<
            F: Fn(&DBusConnection, bool, Option<&Error>) + 'static,
        >(
            this: *mut gio_sys::GDBusConnection,
            remote_peer_vanished: glib_sys::gboolean,
            error: *mut glib_sys::GError,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                &from_glib_borrow(this),
                from_glib(remote_peer_vanished),
                Option::<Error>::from_glib_borrow(error).as_ref(),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"closed\0".as_ptr() as *const _,
                Some(transmute(closed_trampoline::<F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_capabilities_notify<F: Fn(&DBusConnection) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_capabilities_trampoline<F: Fn(&DBusConnection) + 'static>(
            this: *mut gio_sys::GDBusConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::capabilities\0".as_ptr() as *const _,
                Some(transmute(notify_capabilities_trampoline::<F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_closed_notify<F: Fn(&DBusConnection) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_closed_trampoline<F: Fn(&DBusConnection) + 'static>(
            this: *mut gio_sys::GDBusConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::closed\0".as_ptr() as *const _,
                Some(transmute(notify_closed_trampoline::<F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_exit_on_close_notify<F: Fn(&DBusConnection) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_exit_on_close_trampoline<F: Fn(&DBusConnection) + 'static>(
            this: *mut gio_sys::GDBusConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::exit-on-close\0".as_ptr() as *const _,
                Some(transmute(notify_exit_on_close_trampoline::<F> as usize)),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_unique_name_notify<F: Fn(&DBusConnection) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_unique_name_trampoline<F: Fn(&DBusConnection) + 'static>(
            this: *mut gio_sys::GDBusConnection,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::unique-name\0".as_ptr() as *const _,
                Some(transmute(notify_unique_name_trampoline::<F> as usize)),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for DBusConnection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "DBusConnection")
    }
}
